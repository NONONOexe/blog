{
  "hash": "7cbca1b49f8f1cc6a82b68d12154c865",
  "result": {
    "markdown": "---\ntitle: \"Rでブログを作成する\"\ndescription: |\n  distillパッケージによるブログ作成についてまとめました。\nauthor: \"Keisuke ANDO\"\ndate: 2023-05-23\ncategories: [rpackage, blog]\nimage: images/blog.jpg\n---\n\n\n## 1. はじめに\n\n::: {.callout-note}\nこのブログの作成ツールは`{distill}`から、Quartoへ移行しました。この記事は古いものになります。\n:::\n\n自分のブログを作成しようと思って、持っている技術で作る方法がないかと模索していたところ、R Packageの`{distill}`で作れることを知りました。この記事では、このブログを作成するときに学んだ方法やそれに伴って知った情報を紹介します。またこれから新しい技術や方法を知って、ブログを大きく変更することがあると思いますが、そのときには同時にこの記事も更新したいと思います。\n\n## 2. ブログを立てる\n\n### テンプレートの作成\n\n`{distill}`では非常に簡単にブログが作成できます。`distill::create_blog()`を実行するだけです。あとは対話的にディレクトリとブログ名を決定して、一連のテンプレートが作成できます。\n\n本ブログはGitHub Pagesで公開したかったため、以下の引数によりオプションを指定して、作成しました。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ブログの作成\ndistill::create_blog(\n  dir      = \"blog\",                     # ブログを作成するディレクトリ\n  title    = \"NONONOexe Something Blog\", # ブログのタイトル\n  gh_pages = TRUE                        # GitHub Pagesにより公開するかどうか\n)\n```\n:::\n\n\n実行すると次のようにテンプレートが生成されます。また、最初の記事として、`welcome.Rmd`が作成されます。これを編集して、最初の記事を書くことができます。\n\n![生成されるテンプレートファイル](images/distill-files.png){width=75%}\n\n\n### 記事の作成\n\n新たに記事を作成するのも非常に簡単です。次のように`distill::create_post()`でベースを作成できます。なお、引数の`title`から日本語のタイトルは付けられないため、注意が必要です。付ける場合はあとから編集で付けます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 記事の作成\ndistill::create_post(\n  title       = \"how-to-create-blog\", # 記事のタイトル\n  author      = \"Keisuke ANDO\",       # 記事の著者\n  date_prefix = NULL                  # 日付をファイル名に付けない\n)\n```\n:::\n\n\n記事はRMarkdownで作成されるので、HTMLで確認する場合はRStudioのKnitボタンから、Knitしましょう。\n\n![Knitボタン](images/knit-button.png){width=90%}\n\n![Knitして作成したWelcomeページ](images/welcome-page.png){width=90%}\n\n\n## 3. ブログをカスタマイズする\n\n### CSSによるカスタマイズ\n\n`{distill}`で作成したページは通常のHTMLでのウェブサイト作成のようにCSSによるカスタマイズが可能です。次の`distill::create_theme()`を実行することで、CSSのファイルが作成されます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CSSによりテーマをカスタマイズ\ndistill::create_theme()\n## v Created CSS file at theme.css \n## o TODO: Customize it to suit your needs \n## o TODO: Add 'theme: theme.css' to your site or article YAML\n```\n:::\n\n\nメッセージでTODOとして出力されたとおり、CSSのカスタマイズとサイトの構成を管理するYAMLファイルへの追記します。簡単な例としてヘッダのフォントを[Noto Sans JP(Google Fonts)](https://fonts.google.com/specimen/Noto+Sans+JP)に変更する場合は`theme.css`を次のように変更します。\n\n\n::: {.cell}\n\n```{.css .cell-code}\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP&display=swap');\n\n\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Noto Sans JP', sans-serif; /* edited */\n  --mono-font:       monospace;\n  --body-font:       sans-serif;\n  --navbar-font:     sans-serif;  /* websites + blogs only */\n}\n```\n:::\n\n\nまた、CSSを反映するために`_site.yml`にも以下の部分を追記します。\n\n```yml\nname: \"blog\"\ntitle: \"NONONOexe Something Blog\"\ndescription: |\n  NONONOexe Something Blog\noutput_dir: \"docs\"\ntheme: theme.css  # theme.cssを使用\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput: distill::distill_article\n```\n\nこの状態で、ページをKnitするとフォントが次のように変更されたHTMLが生成されます。\n\n![CSSを編集する前](images/before-css-editing.png){width=90%}\n\n![CSSを編集した後](images/after-css-editing.png){width=90%}\n\n\n## 4. まとめ\n\n「Rでブログを作成する」というちょっと変わったアプローチでしたが、想像以上に簡単に作成できることがわかりました。`{distill}`の基本はRMarkdownのため、他の関連パッケージと組み合わせることでまだまだいろいろなことができそうです。[The Distillery](https://distillery.rbind.io/)というサイトでは、`{distill}`を使ったさまざまなサイトを紹介しています。これも参考にこのブログもまた改善を加えていけたらと思います。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}