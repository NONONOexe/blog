[
  {
    "path": "posts/manipulating-geospatial-data/",
    "title": "空間データの操作の基本",
    "description": "Rによる基本的な空間データの操作について紹介します。",
    "author": [
      {
        "name": "Keisuke ANDO",
        "url": {}
      }
    ],
    "date": "2023-06-03",
    "categories": [],
    "contents": "\n1. はじめに\n私は交通事故を対象に空間分析をおこなっています。空間分析では地図を使って、なんらかの地点群、道路、建物などを対象に分析します。空間分析に用いられるこれらのデータを空間データといいます。空間データは点や領域などの空間を表す属性と、数値や文字列などのその空間を説明する属性を併せ持つデータです。\n空間分析をおこなうためのプログラミングはそれほど一般的ではありません。そのため、なにからはじめたらよいかわからないかと思います。この記事では、交通事故地点のデータを使って空間オブジェクトの基本的な操作について説明します。\n2. 使用するRPackageのインストール\nRでは空間データを扱うためのRPackageが盛んに開発されています。ここでは基本的な空間データの操作のために、次のRPackageを使用します。\n{rtatools}: 警察庁が公開する交通事故のデータをダウンロードし、データフレームとして扱うことができるRPackage\n{jpndistrict}: 国土交通省が提供する都道府県、市区町村といった行政区域の境界データを扱えるRPackage\n{tmap}: 空間データをGoogle Mapのようなインタラクティブな地図上に可視化する機能などを提供するRPackage\n{tidyverse}: 拡張されたデータフレーム、データ操作、可視化などデータ分析のためのさまざまな機能を提供するRPackageのコレクション\n{sf}: 空間データの作成や演算のためのRPackage\nこれらのRPackageをインストールする前に、LinuxやMacでは{rtatools}の依存ライブラリをインストールしておく必要があります。例えば、Ubuntuでは、次のようにして事前にライブラリをインストールします。\n\napt-get update\napt-get install -y libpoppler-cpp-dev libudunits2-dev libproj-dev libgdal-dev\n\n依存ライブラリをインストールしたら、Rで以下のコードを実行してRPackageをインストールします。\n\n\n# CRANからのインストール\ninstall.packages(\"tmap\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"sf\")\n\n# GitHubからのインストール\ninstall.packages(\"devtools\")\ndevtools::install_github(\"NONONOexe/rtatools\", upgrade = \"always\")\ndevtools::install_github(\"uribo/jpndistrict\", upgrade = \"always\")\n\n\nRでは標準パッケージリポジトリであるCRANに登録されているものはinstall.packages()でインストールすることができます。また、GitHubで公開されているものは{devtools}というRPackageのinstall_github()によりインストールすることができます。そのため、ここでは{devtools}もインストールしています。\n3. データの可視化\n交通事故地点のデータの取得\n交通事故のデータは交通事故そのもののデータと当事者のデータの2つからなります。ここでは交通事故地点を含む交通事故そのもののデータのみ使います。このデータは次のコードを実行して取得できます。\n\n\nlibrary(rtatools)\n\n# データのダウンロードと読み込み\ndata <-\n  download_traffic_accidents_main() |>\n  read_traffic_accidents_main()\n\n# 交通事故のデータ\naccidents <- data$traffic_accidents\n\n# 一覧形式で表示\naccidents\n\n\n交通事故のデータ（一部）\n\n\nrecording_year\n      prefecture\n      police_office\n      accident_id\n      occurence_time\n      day_of_week\n      holiday\n      day_night_type\n      city\n      road\n      track\n      kilopost\n      region_type\n      zone_regulation\n      road_verge\n      center_divider\n      weather\n      road_surface\n      road_shape\n      road_alignment\n      carriageway_width\n      traffic_signal\n      roundabout_diameter\n      injury_pattern\n      fatalities\n      injuries\n      impact_type\n      collision_position\n      geometry\n    2021\n10\n059\n0001\n2020-12-28 20:25:00\n2\n3\n22\n224\n40020\n2\n0000\n3\n70\n4\n1\n2\n1\n12\n9\n04\n7\n00\n2\n0\n1\n21\n01\nc(141.619122777778, 42.8158677777778)2021\n10\n059\n0002\n2020-12-26 14:30:00\n7\n3\n12\n222\n40040\n2\n0000\n3\n70\n4\n1\n5\n4\n14\n9\n04\n7\n00\n2\n0\n2\n21\n01\nc(141.830353888889, 43.2287838888889)2021\n10\n059\n0003\n2020-12-02 16:55:00\n4\n3\n21\n222\n40030\n1\n0000\n3\n70\n4\n1\n2\n4\n14\n9\n04\n7\n00\n2\n0\n4\n21\n01\nc(141.830324444444, 43.2440230555556)2021\n10\n059\n0004\n2020-12-07 07:10:00\n2\n3\n11\n213\n50020\n2\n0000\n3\n70\n4\n1\n3\n3\n14\n9\n04\n7\n00\n2\n0\n1\n21\n01\nc(141.794236666667, 42.669235)2021\n10\n101\n0001\n2020-12-26 18:40:00\n7\n3\n22\n101\n39990\n0\n0000\n1\n70\n2\n5\n1\n3\n14\n9\n04\n7\n00\n2\n0\n1\n01\n01\nc(141.351606111111, 43.0556763888889)2021\n10\n101\n0002\n2020-12-17 02:39:00\n5\n3\n22\n101\n00360\n0\n0006\n1\n70\n2\n1\n2\n3\n01\n9\n19\n1\n00\n2\n0\n1\n01\n30\nc(141.352983055556, 43.0565608333333)\n\n交通事故地点の地図への描画\n交通事故のデータはgeometryという項目にその地点の緯度、経度を持っています。しかし、数値ではどこで発生した事故であるのかがよくわかりません。\n{tmap}を使うと空間データを地図に描画することができます。いろいろな描画の形式がありますが、ここでは、マーカーを使って描画します。\n\n\nlibrary(tmap)\n\n# データ数が多いため、交通事故地点の先頭100件を抽出\naccidents_head_100 <- head(accidents, 100)\n\n# インタラクティブな地図へ描画するモードへの切り替え\ntmap_mode(\"view\")\n\n# 地図上に描画\ntm_shape(accidents_head_100) + tm_markers()\n\n\n\nこのように交通事故地点を地図上に描画することができます。tm_markers()は指定した空間データの位置をマーカーを使って表示します。また、近くに位置するマーカーはまとめて表示します。\n4. データの抽出\n属性値にもとづく条件抽出\n空間分析では、通常のデータ分析と同様に期間ごとにデータを分ける、ある特定の種類のデータについて抽出する、などして特定の条件に該当するデータに絞って分析することがあります。\nこのように条件に基づいてデータを抽出する場合、{tidyverse}のもつRPackageのひとつである{dplyr}のfilter()を使うと次のように簡単に抽出できます。\n\n\nlibrary(tidyverse)\n\naccidents_aichi_morning_rain <-\n  accidents |>\n  # 愛知県の交通事故を抽出（都道府県コード: 54）\n  filter(prefecture == \"54\") |>\n  # 朝6時から朝8時の間の交通事故を抽出\n  filter(between(hour(occurence_time), 6, 8)) |>\n  # 雨天時の事故を抽出（天候コード: 3）\n  filter(weather == \"3\")\n\n# 地図上に描画\ntm_shape(accidents_aichi_morning_rain) + tm_markers()\n\n\n\nここでは全国のデータから段階的に都道府県、時間、天候の3つの条件で抽出しています。filter()は第1引数がデータで第2引数が条件であるため、データを|>（native pipe）で渡してつなげることができます。\n領域にもとづく抽出\n空間分析では「ある領域内に含まれるデータ」や「ある点に最も距離の近いデータ」のようにデータがもつ空間に応じた抽出もできます。空間データの処理では{sf}を使います。例えば、瀬戸市の交通事故を抽出する場合は次のようにできます。\n\n\nlibrary(jpndistrict)\nlibrary(sf)\n\n# 瀬戸市の領域を取得\nseto <- jpn_cities(jis_code = \"23\", admin_name = \"瀬戸市\")\n# accidents_aichi_morning_rainのうち、瀬戸市内の交通事故地点のみを抽出\naccidents_seto_morning_rain <-\n  accidents_aichi_morning_rain |> st_filter(seto)\n\n# 瀬戸市の領域のレイヤー\ntm_seto <- tm_shape(seto) + tm_polygons(\n  alpha = 0.2, col = \"yellow\", border.col = \"yellow\")\n# 交通事故地点のレイヤー\ntm_accidents <- tm_shape(accidents_seto_morning_rain) + tm_markers()\n# 重ね合わせて描画\ntm_seto + tm_accidents\n\n\n\nこの例では、瀬戸市の領域と抽出した交通事故地点を重ね合わせて描画しています。{tmap}で描画したオブジェクトは+演算子で簡単にレイヤーとして重ね合わせることができます。またそれぞれのレイヤーやベースとなっているタイルマップの操作は左上のコントロールから操作できます。\n5. まとめ\nここでは、RPackageで提供されている空間データを使って、データの可視化と抽出をおこないました。ここで紹介したもの以外にもRでは多くの空間データや操作が提供されています。なにができるかについては{sf}のドキュメントが詳しいです。また、以前{tmap}を使ったプロットについて書いた以下の記事や、公開された空間分析についての書籍もあります。こちらからはさまざまな事例をみられるので、参考になると思います。\nNONONOexe(Keisuke ANDO), Rによる空間分析のススメ―交通事故ヒートマップを作成してみよう―, 2022\nRobin Lovelace, Jakub Nowosad and Jannes Muenchow. Geocomputation with R, 2019 (日本語版)\n\n\n\n",
    "preview": {},
    "last_modified": "2023-06-03T09:41:27+09:00",
    "input_file": {}
  },
  {
    "path": "posts/how-to-create-blog/",
    "title": "Rでブログを作成する",
    "description": "Rでブログを作成するための技術をまとめています。",
    "author": [
      {
        "name": "Keisuke ANDO",
        "url": {}
      }
    ],
    "date": "2023-05-23",
    "categories": [],
    "contents": "\n1. はじめに\n自分のブログを作成しようと思って、持っている技術で作る方法がないかと模索していたところ、R Packageのdistillで作れることを知りました。この記事では、このブログを作成するときに学んだ方法やそれに伴って知った情報を紹介します。またこれから新しい技術や方法を知って、ブログを大きく変更することがあると思いますが、そのときには同時にこの記事も更新したいと思います。\n2. ブログを立てる\nテンプレートの作成\n{distill}では非常に簡単にブログが作成できます。distill::create_blog()を実行するだけです。あとは対話的にディレクトリとブログ名を決定して、一連のテンプレートが作成できます。\n本ブログはGitHub Pagesで公開したかったため、以下の引数によりオプションを指定して、作成しました。\n\n\n# ブログの作成\ndistill::create_blog(\n  dir      = \"blog\",                     # ブログを作成するディレクトリ\n  title    = \"NONONOexe Something Blog\", # ブログのタイトル\n  gh_pages = TRUE                        # GitHub Pagesにより公開するかどうか\n)\n\n\n実行すると次のようにテンプレートが生成されます。また、最初の記事として、welcome.Rmdが作成されます。これを編集して、最初の記事を書くことができます。\n生成されるテンプレートファイル記事の作成\n新たに記事を作成するのも非常に簡単です。次のようにdistill::create_post()でベースを作成できます。なお、引数のtitleから日本語のタイトルは付けられないため、注意が必要です。付ける場合はあとから編集で付けます。\n\n\n# 記事の作成\ndistill::create_post(\n  title       = \"how-to-create-blog\", # 記事のタイトル\n  author      = \"Keisuke ANDO\",       # 記事の著者\n  date_prefix = NULL                  # 日付をファイル名に付けない\n)\n\n\n記事はRMarkdownで作成されるので、HTMLで確認する場合はRStudioのKnitボタンから、Knitしましょう。\nKnitボタンKnitして作成したWelcomeページ3. ブログをカスタマイズする\nCSSによるカスタマイズ\n記事{distill}で作成したページは通常のHTMLでのウェブサイト作成のようにCSSによるカスタマイズが可能です。次のdistill::create_theme()を実行することで、CSSのファイルが作成されます。\n\n\n# CSSによりテーマをカスタマイズ\ndistill::create_theme()\n## v Created CSS file at theme.css \n## o TODO: Customize it to suit your needs \n## o TODO: Add 'theme: theme.css' to your site or article YAML\n\n\nメッセージでTODOとして出力されたとおり、CSSのカスタマイズとサイトの構成を管理するYAMLファイルへの追記します。簡単な例としてヘッダのフォントをNoto Sans JP(Google Fonts)に変更する場合はtheme.cssを次のように変更します。\n\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP&display=swap');\n\n\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Noto Sans JP', sans-serif; /* edited */\n  --mono-font:       monospace;\n  --body-font:       sans-serif;\n  --navbar-font:     sans-serif;  /* websites + blogs only */\n}\n\nまた、CSSを反映するために_site.ymlにも以下の部分を追記します。\n\nname: \"blog\"\ntitle: \"NONONOexe Something Blog\"\ndescription: |\n  NONONOexe Something Blog\noutput_dir: \"docs\"\ntheme: theme.css  # theme.cssを使用\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput: distill::distill_article\n\nこの状態で、ページをKnitするとフォントが次のように変更されたHTMLが生成されます。\nCSSを編集する前CSSを編集した後4. まとめ\n「Rでブログを作成する」というちょっと変わったアプローチでしたが、想像以上に簡単に作成できることがわかりました。{distill}の基本はRMarkdownのため、他の関連パッケージと組み合わせることでまだまだいろいろなことができそうです。The Distilleryというサイトでは、{distill}を使ったさまざまなサイトを紹介しています。これも参考にこのブログもまた改善を加えていけたらと思います。\n\n\n\n\n\n\n",
    "preview": "posts/how-to-create-blog/images/blog.svg",
    "last_modified": "2023-05-26T19:42:48+09:00",
    "input_file": {}
  }
]
